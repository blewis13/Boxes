/*
 * generated by Xtext
 */
package org.xtext.example.boxes.ui.contentassist

import org.xtext.example.boxes.ui.contentassist.AbstractBoxesDslProposalProvider
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.RuleCall
import boxes.Box
import boxes.BoxInstance

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class BoxesDslProposalProvider extends AbstractBoxesDslProposalProvider {
	
	override complete_Connection(EObject model, RuleCall ruleCall, 
  		ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	
		// call implementation of superclass
  		super.complete_Connection(model, ruleCall, context, acceptor);
  		
  		val boxInstance = model as BoxInstance
  		
	  		val proposal = 
	  		'''
	  		// Connect all ports for «boxInstance.instanceName»
	  				«FOR port : boxInstance.boxRef.ports»
	  				Connection {intPorts («port.name») extPorts(«port.name»)},
	  				«ENDFOR»
	  				
	  		'''

	  		acceptor.accept(createCompletionProposal(proposal, context));
  		}

}

